<?php

/**
 * @file
 * This module handles importing product information - either from PIM or BMBWS - and creating nodes.
 * 
 */

/**
 * Implements hook_menu(). 
 */
function bmb_product_menu() {

  $form['admin/config/bmb-product'] = array(
    'title' => 'BMB Product',
    'description' => 'Settings for PIM',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bmb_product_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => '/assets/bmb-product.settings-form.inc',
  );
  
  $form['admin/config/bmb-product/settings'] = array(
    'title' => 'BMB Product Import Settings',
    'description' => 'Settings for PIM',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bmb_product_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => '/assets/bmb-product.settings-form.inc',
  );
  
  // handles the bmbws import
  $form['bmb-product/import'] = array(
    'title' => 'BMBWS Product Update',
    'description' => 'Add and/or Update BMB Product nodes from BMBWS.',
    'page callback' => 'bmb_product_import',
    'page arguments' => array(2,3,4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => '/assets/bmb-product.import.inc',
  );
  
  return $form;
}

/**
 * Implements hook_cron
 */
function bmb_product_cron() {
  // the settings page has a moster switch that to run or not
  if(variable_get('bmb_product_pim_enabled', 0) == 1) {
    $queue = DrupalQueue::get('bmb_products');
    // need a list of domains that need to be imported
    $domains = domain_domains();
    foreach($domains as $domain){
      if(variable_get('bmb_product_domain_include_' . $domain['domain_id'], 0) == 1) {
        if(variable_get('bmb_product_domain_method_' . $domain['domain_id'], NULL) == '0') {
          $queue->createItem($domain['domain_id']);
        }
        
      }
    } 
  } 
}

/*
 * Implements hook_cron_queue_info().
 */
function bmb_product_cron_queue_info(){
  //ddl(' in bmb_product_cron_queue_info');
  $queues['bmb_products'] = array(
    'worker callback' => 'bmb_product_import_on_cron',
	  'time' => 240,
  );
  return $queues;
}

function bmb_product_import_on_cron($item){
  //ddl('bmb_product_import_on_cron item - ' . $item);
  
  drupal_set_message('bmb_product cron ran - ' . $item);
  //watchdog('bmb_product', 'PIM cron running for site %domain_id', array('%domain_id' => $item), $link = NULL);
  
  module_load_include('inc', 'bmb_product', '/assets/bmb-product.import');
  bmb_product_import('pim', $item, 0);
  
}

/**
 * Implementation of hook_form_alter().
 * 
 * @form domain_form 
 * 
 */
function bmb_product_form_domain_form_alter(&$form, $form_state, $form_id)  {
    $this_domain_id = $form['domain_id']['#value'];

    $form['bmb_product'] = array(
      '#type' => 'fieldset', 
      '#weight' => -10,
      '#title' => t('BMB Product Settings'), 
      '#collapsible' => TRUE, 
      '#collapsed' => TRUE,
    );
    
    $form['bmb_product']['bmb_product_domain_include_' . $this_domain_id] = array(
      '#type' => 'checkbox', 
      '#title' => t('Include on BMB Settings Page'), 
      '#default_value' => variable_get('bmb_product_domain_include_' . $this_domain_id, FALSE), 
      '#description' => t('If FALSE then this domain will NOT appear on BMB Product settings page.'),
    );
    
    $bmb_import_options = array(0 => t('PIM'), 1 => t('BMBWS'));
    $form['bmb_product']['bmb_product_domain_method_' . $this_domain_id] = array(
      '#type' => 'radios',
      '#title' => t('Import Method'),
      '#default_value' => variable_get('bmb_product_domain_method_' . $this_domain_id, NULL),
      '#options' => $bmb_import_options,
    );
    
    $form['bmb_product']['bmb_product_pim_siteid_' . $this_domain_id] = array(
      '#type' => 'textfield',
      '#title' => t('PIM Brand ID'),
      '#default_value' => variable_get('bmb_product_pim_siteid_' . $this_domain_id, ''),
      '#size' => 40,  
    );
    
    $form['bmb_product']['bmb_product_bmbws_url_' . $this_domain_id] = array(
      '#type' => 'textfield',
      '#title' => t('BMBWS File ULR'),
      '#default_value' => variable_get('bmb_product_bmbws_url_' . $this_domain_id, ''),
      '#size' => 100,  
    );
    
    $form['#submit'][] = 'bmb_product_form_domain_form_alter_submit';
}
/**
 * Submit function for domain_form
 */
function bmb_product_form_domain_form_alter_submit($form, $form_state) {
  if( isset($form_state['values']['domain_id']) && !empty($form_state['values']['domain_id']) ){
    $this_domain_id = $form_state['values']['domain_id'];
    if($form_state['values']['bmb_product_domain_include_' . $this_domain_id] == 1) {
      variable_set('bmb_product_domain_include_' . $this_domain_id, $form_state['values']['bmb_product_domain_include_' . $this_domain_id]);
      variable_set('bmb_product_domain_method_' . $this_domain_id, $form_state['values']['bmb_product_domain_method_' . $this_domain_id]);
      if(!empty($form_state['values']['bmb_product_pim_siteid_' . $this_domain_id])){
        variable_set('bmb_product_pim_siteid_' . $this_domain_id, $form_state['values']['bmb_product_pim_siteid_' . $this_domain_id]);
        variable_del('bmb_product_bmbws_url_' . $this_domain_id);
      }
      if(!empty($form_state['values']['bmb_product_bmbws_url_' . $this_domain_id])){
        variable_set('bmb_product_bmbws_url_' . $this_domain_id, $form_state['values']['bmb_product_bmbws_url_' . $this_domain_id]);
        variable_del('bmb_product_pim_siteid_' . $this_domain_id);
      }
    } else {
      variable_del('bmb_product_domain_include_' . $this_domain_id);
      variable_del('bmb_product_domain_method_' . $this_domain_id);
      variable_del('bmb_product_pim_siteid_' . $this_domain_id);
      variable_del('bmb_product_bmbws_url_' . $this_domain_id);
    }
  }
}








/**
 * Delete {system} records for long-lost modules.
 */
/*function bmb_product_update_7100() {
  $modules = array(
    'bmb_product_import',
  );
  db_delete('system')
    ->condition('name', $modules, 'IN')
    ->condition('type', 'module')
    ->execute();
}*/














